# stdlib
import re
import shutil
import sys
from typing import Union

# 3rd party
import pytest
import sphinx
from bs4 import BeautifulSoup  # type: ignore
from coincidence.regressions import AdvancedFileRegressionFixture
from domdf_python_tools.paths import PathPlus
from domdf_python_tools.stringlist import StringList
from jinja2 import Template
from pytest_regressions.common import check_text_files
from sphinx_toolbox.testing import HTMLRegressionFixture


@pytest.fixture()
def doc_root(tmp_pathplus: PathPlus):
	doc_root = tmp_pathplus.parent / "test-html-section"
	doc_root.maybe_make()
	(doc_root / "conf.py").write_clean("extensions = ['html_section']")

	shutil.copy2(PathPlus(__file__).parent / "index.rst", doc_root / "index.rst")

	examples_dir = doc_root / "examples"
	examples_dir.maybe_make()


@pytest.mark.usefixtures("doc_root")
@pytest.mark.sphinx("html", testroot="test-html-section")
def test_build_example(app):
	app.build()
	app.build()


@pytest.mark.usefixtures("doc_root")
@pytest.mark.sphinx("html", testroot="test-html-section")
def test_html_output(app, html_regression: HTMLRegressionFixture):

	assert app.builder.name.lower() == "html"

	app.build(force_all=True)

	output_file = PathPlus(app.outdir / "index.html")
	page = BeautifulSoup(output_file.read_text(), "html5lib")
	html_regression.check(page, jinja2=False)


_latex_date_re = re.compile(r"\\date{.*}")


class LaTeXRegressionFixture(AdvancedFileRegressionFixture):
	"""
	Subclass of :class:`pytest_regressions.file_regression.FileRegressionFixture`
	for checking LaTeX files.
	"""  # noqa: D400

	def check(  # type: ignore
		self,
		contents: Union[str, StringList],
		*,
		extension: str = ".html",
		jinja2: bool = False,
		**kwargs
		):
		r"""
		Check a LaTeX file generated by Sphinx for regressions,
		using `pytest-regressions <https://pypi.org/project/pytest-regressions/>`__

		:param contents:
		:param \*\*kwargs: Additional keyword arguments passed to
			:meth:`pytest_regressions.file_regression.FileRegressionFixture.check`.
		"""  # noqa: D400

		__tracebackhide__ = True

		def check_fn(obtained_filename, expected_filename):
			print(obtained_filename, expected_filename)
			expected_filename = PathPlus(expected_filename)

			template = Template(
					expected_filename.read_text(),
					block_start_string="<%",
					block_end_string="%>",
					variable_start_string="<<",
					variable_end_string=">>",
					comment_start_string="<#",
					comment_end_string="#>",
					)

			expected_filename.write_text(
					template.render(
							sphinx_version=sphinx.version_info,
							python_version=sys.version_info,
							)
					)

			return check_text_files(obtained_filename, expected_filename)

		new_contents = _latex_date_re.sub(
				r"\\date{Mar 11, 2021}",
				str(contents).replace("\\sphinxAtStartPar\n", ''),
				)
		new_contents = new_contents.replace("%% let collapsible ", "%% let collapsable ")  # changed in Sphinx 4.2

		return super().check(
				new_contents,
				extension=".tex",
				check_fn=check_fn,
				)


@pytest.fixture()
def latex_regression(datadir, original_datadir, request) -> LaTeXRegressionFixture:
	"""
	Returns a :class:`~.LaTexRegressionFixture` scoped to the test function.
	"""

	return LaTeXRegressionFixture(datadir, original_datadir, request)


@pytest.mark.usefixtures("doc_root")
@pytest.mark.sphinx("latex", testroot="test-html-section")
def test_latex_output(app, latex_regression: LaTeXRegressionFixture):

	assert app.builder.name.lower() == "latex"

	app.build(force_all=True)

	output_file = PathPlus(app.outdir / "python.tex")
	latex_regression.check(StringList(output_file.read_lines()))
